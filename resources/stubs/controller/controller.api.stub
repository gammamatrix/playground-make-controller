<?php
/**
 * {{organization}}
 */

declare(strict_types=1);
namespace {{ namespace }};

{{ use }}use {{ namespacedRequest }};
use {{ namespacedResource }};
use {{ namespacedModel }};
use Illuminate\Http\Response;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Carbon;

/**
 * \{{ namespace }}\{{ class }}
 */
class {{ class }} extends {{ extends }}{{ implements }}
{
{{ use_class }}{{ constants }}{{ properties }}    /**
     * @var array<string, string>
     */
    public array $packageInfo = [
        'model_attribute' => '{{model_attribute}}',
        'model_label' => '{{model_label}}',
        'model_label_plural' => '{{model_label_plural}}',
        'model_route' => '{{model_route}}',
        'model_slug' => '{{model_slug}}',
        'model_slug_plural' => '{{model_slug_plural}}',
        'module_label' => '{{module_label}}',
        'module_label_plural' => '{{module_label_plural}}',
        'module_route' => '{{module_route}}',
        'module_slug' => '{{module_slug}}',
        'privilege' => '{{privilege}}',
        'table' => '{{table}}',
    ];

    /**
     * Create the {{model_label}} resource in storage.
     *
     * @route GET /api/{{module_slug}}/{{model_slug_plural}}/create {{model_route}}.create
     */
    public function create(
        Requests\{{ model }}\CreateRequest $request
    ): JsonResponse|Resources\{{ model }} {

        $validated = $request->validated();

        $user = $request->user();

        ${{model_slug}} = new {{model}}($validated);

        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }

    /**
     * Edit the {{model_label}} resource in storage.
     *
     * @route GET /api/{{module_slug}}/{{model_slug_plural}}/edit {{model_route}}.edit
     */
    public function edit(
        {{ model }} ${{model_slug}},
        Requests\{{ model }}\EditRequest $request
    ): JsonResponse|Resources\{{ model }} {

        $validated = $request->validated();

        $user = $request->user();

        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }

    /**
     * Remove the {{model_label}} resource from storage.
     *
     * @route DELETE /api/{{module_slug}}/{{{model_slug}}} {{model_route}}.destroy
     */
    public function destroy(
        {{ model }} ${{model_slug}},
        Requests\{{ model }}\DestroyRequest $request
    ): Response {

        $validated = $request->validated();

        $user = $request->user();

        if ($user?->id) {
            ${{model_slug}}->modified_by_id = $user->id;
        }

        if (empty($validated['force'])) {
            ${{model_slug}}->delete();
        } else {
            ${{model_slug}}->forceDelete();
        }

        return response()->noContent();
    }

    /**
     * Lock the {{model_label}} resource in storage.
     *
     * @route PUT /api/{{module_slug}}/{{{model_slug}}} {{model_route}}.lock
     */
    public function lock(
        {{ model }} ${{model_slug}},
        Requests\{{ model }}\LockRequest $request
    ): JsonResponse|Resources\{{ model }} {

        $validated = $request->validated();

        $user = $request->user();

        if ($user?->id) {
            ${{model_slug}}->modified_by_id = $user->id;
        }

        ${{model_slug}}->locked = true;

        ${{model_slug}}->save();

        $meta = [
            'session_user_id' => $user?->id,
            'id' => ${{model_slug}}->id,
            'timestamp' => Carbon::now()->toJson(),
            'info' => $this->packageInfo,
        ];

        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }
    /**
     * Display a listing of {{model_label}} resources.
     *
     * @route GET /api/{{module_slug}} {{model_route}}
     */
    public function index(
        Requests\{{ model }}\IndexRequest $request
    ): JsonResponse|Resources\{{ model }}Collection {

        $user = $request->user();

        $validated = $request->validated();

        $query = {{ model }}::addSelect(sprintf('%1$s.*', $this->packageInfo['table']));

        $query->sort($validated['sort'] ?? null);

        if (! empty($validated['filter']) && is_array($validated['filter'])) {

            $query->filterTrash($validated['filter']['trash'] ?? null);

            $query->filterIds(
                $request->getPaginationIds(),
                $validated
            );

            $query->filterFlags(
                $request->getPaginationFlags(),
                $validated
            );

            $query->filterDates(
                $request->getPaginationDates(),
                $validated
            );

            $query->filterColumns(
                $request->getPaginationColumns(),
                $validated
            );
        }

        $perPage = ! empty($validated['perPage']) && is_int($validated['perPage']) ? $validated['perPage'] : null;
        $paginator = $query->paginate($perPage);

        $paginator->appends($validated);

        return (new Resources\{{ model }}Collection($paginator))->response($request);
    }

    /**
     * Restore the {{model_label}} resource from the trash.
     *
     * @route PUT /api/{{module_slug}}/restore/{{{model_slug}}} {{model_route}}.restore
     */
    public function restore(
        {{ model }} ${{model_slug}},
        Requests\{{ model }}\RestoreRequest $request
    ): JsonResponse|Resources\{{ model }} {

        $validated = $request->validated();

        $user = $request->user();

        if ($user?->id) {
            ${{model_slug}}->modified_by_id = $user->id;
        }

        ${{model_slug}}->restore();

        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }

    /**
     * Display the {{model_label}} resource.
     *
     * @route GET /api/{{module_slug}}/{{{model_slug}}} {{model_route}}.show
     */
    public function show(
        {{ model }} ${{model_slug}},
        Requests\{{ model }}\ShowRequest $request
    ): JsonResponse|Resources\{{ model }} {
        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }

   /**
     * Store a newly created API {{model_label}} resource in storage.
     *
     * @route POST /api/{{module_slug}} {{model_route}}.post
     */
    public function store(
        StoreRequest $request
    ): Response|JsonResponse|Resources\{{ model }} {
        $validated = $request->validated();

        $user = $request->user();

        ${{model_slug}} = new {{ model }}($validated);

        if ($user?->id) {
            ${{model_slug}}->created_by_id = $user->id;
        }

        ${{model_slug}}->save();

        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }

    /**
     * Unlock the {{model_label}} resource in storage.
     *
     * @route DELETE /api/{{module_slug}}/lock/{{{model_slug}}} {{model_route}}.unlock
     */
    public function unlock(
        {{ model }} ${{model_slug}},
        Requests\{{ model }}\UnlockRequest $request
    ): JsonResponse|Resources\{{ model }} {

        $validated = $request->validated();

        $user = $request->user();

        ${{model_slug}}->locked = false;

        if ($user?->id) {
            ${{model_slug}}->modified_by_id = $user->id;
        }

        ${{model_slug}}->save();

        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }
    /**
     * Update the {{model_label}} resource in storage.
     *
     * @route PATCH /api/{{module_slug}}/{{{model_slug}}} {{model_route}}.patch
     */
    public function update(
        {{ model }} ${{model_slug}},
        Requests\{{ model }}\UpdateRequest $request
    ): JsonResponse {

        $validated = $request->validated();

        $user = $request->user();

        ${{model_slug}}->update($validated);

        if ($user?->id) {
            ${{model_slug}}->modified_by_id = $user->id;
        }

        return (new Resources\{{ model }}(${{model_slug}}))->additional(['meta' => [
            'info' => $this->packageInfo,
        ]])->response($request);
    }{{ relationships }}{{ actions }}{{ methods }}
}
